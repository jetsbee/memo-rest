buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-snapshot" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
 
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.BUILD-SNAPSHOT"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        classpath("com.moowork.gradle:gradle-node-plugin:0.13")
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'

//exclude some files from resources
sourceSets {
    main {
        resources {
            exclude '**/node'
            exclude '**/node_modules'
            exclude '**/package.json'
            exclude '**/index.js'
            exclude '**/.babelrc'
            exclude '**/webpack.config.js'
        }
    }
}

jar {
    baseName = 'memo-rest'
    version =  '0.1.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    runtime("com.h2database:h2")
    compile("org.springframework.boot:spring-boot-devtools")
    compileOnly "org.projectlombok:lombok:1.16.10"
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
}

def nodeModulesDir = file("${project.projectDir}/src/main/resources/static/node_modules")

task createNodeModulesDir << {
    if (!nodeModulesDir.isDirectory()) {
        nodeModulesDir.mkdirs()
    }
}

node {
    version = '6.0.0'
    download = true
    workDir = file("${project.projectDir}/src/main/resources/static/node")
    nodeModulesDir = nodeModulesDir
}

npmInstall {
    execOverrides {
        it.workingDir = file("${project.projectDir}/src/main/resources/static")
    }
}

npmInstall.dependsOn createNodeModulesDir

npmInstall.outputs.upToDateWhen { false }

task webPack(type: NodeTask) {
    dependsOn npmInstall
    script = file("${project.projectDir}/src/main/resources/static/node_modules/webpack/bin/webpack.js")
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = file("${project.projectDir}/src/main/resources/static")
    }
}

processResources.dependsOn webPack

// Changing JRE launcher
eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}